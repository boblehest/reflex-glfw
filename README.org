* reflex-glfw
*** What

    =reflex-glfw= is an adapter between [[https://github.com/reflex-frp/reflex][Reflex]], a [[http://www.haskell.org/][Haskell]] FRP framework and
    [[https://github.com/bsl/GLFW-b][GLFW-b]], a set of [[http://www.glfw.org/][GLFW]] bindings.

*** Where

    The home of =reflex-glfw= is at its Github page:
    https://github.com/deepfire/reflex-glfw

*** Reflex 0.5

    /reflex-glfw/ depends on a pre-release version of =reflex=, which means having
    to jump through extra hoops to use /reflex-glfw/.

***** Installing via Nix
      By far the easiest and most reliable way to do this is to employ the /Nix/
      package manager, which, unless you already have it, has to be installed
      first, of course:

      - https://nixos.org/nix/

*** Building the demo

    Once you have /Nix/ installed, building the demo is as easy as:

    #+BEGIN_SRC sh
    # First, enter the fixed environment (NOTE: this can take a while):
    nix-shell --no-build-output
    # ..then, inside the shell:
    cabal build
    dist/build/reflex-glfw-demo/reflex-glfw-demo
    #+END_SRC

*** libGL error: unable to load driver: XXX_dri.so

    In case you happen upon https://github.com/deepfire/reflex-glfw/issues/4, at
    least for nVidia GPUs there's a semi-automated solution:

    #+BEGIN_SRC shell
    ./nix-install-vendor-gl.sh
    export LD_LIBRARY_PATH=/run/opengl-driver/lib
    #+END_SRC

    Make sure to read the output of:

    #+BEGIN_SRC shell
    ./nix-install-vendor-gl.sh --explain
    #+END_SRC

    ..to get the bigger picture.

    Adding support for other GPU vendors shouldn't be very hard -- all the
    infrastructure is there.
